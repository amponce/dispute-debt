# VA Application Template Guide

## IMPORTANT: FIRST STEPS
1. BEFORE DOING ANYTHING ELSE, read the project README.md file to understand the template structure, available components, and layout patterns
2. Explore the example pages in the `/src/pages/` directory to see implementation examples
3. Use the Components.jsx page as a reference for properly formatted VA Design System components

## Overview
This template provides a foundation for building VA applications that meet design system standards, accessibility requirements, and best practices. Use this template to create various interfaces including landing pages, informational pages, and form-based applications.

## Project Structure
- `/src/components/` - Reusable VA components (header, footer, layout)
- `/src/pages/` - Example pages (Home, Example Form, Components showcase)
- `/src/App.jsx` - Main routing and application setup
- `/src/main.jsx` - Application entry point with VA component initialization

## Getting Started
1. Explore the example pages to understand the available components and patterns
2. Use the Components page as a reference for available VA components
3. Create new pages in the `/src/pages/` directory following the existing patterns
4. Add routes to your new pages in `App.jsx`
5. IMPORTANT: Always include a link to your new page from the homepage (`Home.jsx`), or make the new page the homepage if that is appropriate for your use case.

## Layout and Page Structure
- Always wrap pages with the shared Layout component to include the standard VA header, footer, and metadata
- Use the Layout component to maintain consistent page structure, but NO LONGER pass a title prop:
  ```jsx
  <Layout>
    <h1 className="vads-u-font-family--serif vads-u-font-size--h1 vads-u-margin-y--2">Your Page Title</h1>
    {/* Your page content */}
  </Layout>
  ```
- IMPORTANT: Each page should define its own title as an H1 immediately after the breadcrumbs
- Provide breadcrumbs on every page with VA breadcrumb components for clear navigation

## Layout Selection Guidelines

ALWAYS follow these specific guidelines when choosing a layout for pages:

### 1. Full-Width Layout

USE FOR: Landing pages, marketing pages, pages with hero banners, image-heavy content

IMPLEMENTATION:
```jsx
<Layout fullWidth={true}>
  {/* Content here */}
</Layout>
```

### 2. Single-Column Layout

USE FOR: Simple informational pages, forms, content-focused pages

IMPLEMENTATION:
```jsx
<Layout>
  <div className="vads-l-row">
    <div className="vads-l-col--12">
      <h1>Page Title</h1>
      {/* Content here */}
    </div>
  </div>
</Layout>
```

### 3. Two-Column Layout (Main + Sidebar)

**IMPORTANT:** Do not generate two-column layout pages by default unless it's a full-width page or the user expressly asks for it.

USE FOR: Pages with related information or navigation in sidebar, documentation pages

IMPLEMENTATION:
```jsx
<Layout>
  <div className="vads-l-row">
    <div className="vads-l-col--12 medium-screen:vads-l-col--8">
      <h1>Page Title</h1>
      {/* Main content here */}
    </div>
    <div className="vads-l-col--12 medium-screen:vads-l-col--4">
      {/* Sidebar content here */}
    </div>
  </div>
</Layout>
```

### Full-Width Layout Structure

For full-width landing pages, use the following approach:

1. Use the outer container with `vads-u-width--full` to ensure content spans the entire width
2. For colored sections, apply background colors directly to section elements
3. Always desktop-first design with proper tablet/mobile breakpoints
4. Structure each section with proper nested containers

```jsx
{/* Full-width container for the entire page */}
<div className="vads-u-width--full">
  {/* Hero Section - Full Width */}
  <section className="vads-u-background-color--primary vads-u-color--white vads-u-padding-y--5 vads-u-margin-bottom--5">
    <div className="vads-grid-container">
      <div className="vads-grid-row">
        <div className="vads-grid-col-12 desktop:vads-grid-col-8">
          <h2 className="vads-u-font-family--serif vads-u-font-size--h1 vads-u-margin-top--0">
            Hero Section Title
          </h2>
          <p className="vads-u-font-size--lg vads-u-margin-bottom--4">
            Hero section description text goes here.
          </p>
          <va-button text="Primary Call to Action" href="#main-content" uswds big />
        </div>
      </div>
    </div>
  </section>

  {/* Feature Cards Section */}
  <section className="vads-u-margin-bottom--6">
    <div className="vads-grid-container">
      <h2 className="vads-u-font-family--serif vads-u-font-size--h2 vads-u-text-align--center">
        Feature Cards Section
      </h2>
      <div className="vads-grid-row vads-u-margin-x--neg2p5">
        {/* Card repeats in grid layout */}
        <div className="vads-grid-col-12 tablet:vads-grid-col-6 desktop:vads-grid-col-4 vads-u-padding-x--2p5">
          <va-card>
            <h3 slot="headline">Card Title</h3>
            <p>Card description</p>
          </va-card>
        </div>
      </div>
    </div>
  </section>

  {/* Additional full-width section example */}
  <section className="vads-u-background-color--gray-lightest vads-u-padding-y--5">
    <div className="vads-grid-container">
      <div className="vads-grid-row">
        <div className="vads-grid-col-12">
          <h2 className="vads-u-font-family--serif vads-u-font-size--h2 vads-u-text-align--center">
            Another Section
          </h2>
          <p>Content goes here</p>
        </div>
      </div>
    </div>
  </section>
</div>
```

See the `/src/pages/LandingPageTemplate.jsx` file for a complete implementation example.

- NEVER use inline styles with calc() functions or hacks like `marginLeft: 'calc(-50vw + 50%)'` to create full-width sections
- ALWAYS design for desktop first, then ensure responsive behavior works on smaller screens
- Refer to the layout examples in the README for proper grid usage

## Components and Styling
- Rely only on JSX, VA Web Components, va- utility classes (vads-u-â€¦), React hooks, and VA icons
- Do not pull in extra UI frameworks or icon sets unless explicitly requested
- Use the VA Design System utility classes for spacing, typography, grid, and flex layouts
- IMPORTANT: Keep vertical spacing compact - use minimal margins between elements
  - Use `vads-u-margin-top--1` or `vads-u-margin-top--0` for elements following breadcrumbs
  - Use `vads-u-margin-bottom--0` for breadcrumb containers
  - Avoid excessive whitespace between page elements
- Prioritize real accessibility, polish, and a visually appealing design that honors the VA Design System
- Follow Section 508 and WCAG 2.1 AA standards at all times

## VA Web Components Usage
- Leverage VA Web Components for all interface elements including:
  - Alerts (see the updated alert format with proper headings)
  - Buttons, forms, and input fields
  - Accordions, banners, and cards
  - Navigation elements and breadcrumbs
  - Modals and dialogs
  - Process lists and on-page navigation
- Reference the Components page for examples of properly formatted components
- Never override base styles of VA Web Components
- IMPORTANT: Use standard web components rather than React bindings when possible for better compatibility
- Prefer to use the legacy versions of dependencies that are already in the template
- If newer versions are needed, test thoroughly to ensure compatibility

## Form Implementation
- Use standard form validation patterns as shown in the ExampleForm page
- Implement proper error handling that announces errors and moves focus to invalid fields
- Ensure all form elements have proper labels and aria attributes
- Include clear success and error states

## Best Practices
- Build every VA interface to production quality
- Choose stock photos from Unsplash and reference only URLs you know exist
- Ensure all interactive elements are keyboard accessible
- Test with screen readers to verify accessibility
- Use semantic HTML elements whenever possible
- Align buttons in a row instead of in columns.

CRITICAL RULE: Never edit package.json directly; use npm commands if dependencies truly need installing.
